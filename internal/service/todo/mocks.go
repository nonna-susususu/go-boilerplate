// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package todo

import (
	"context"

	"github.com/fastworkco/go-boilerplate/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTodoRepository creates a new instance of MockTodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTodoRepository {
	mock := &MockTodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTodoRepository is an autogenerated mock type for the TodoRepository type
type MockTodoRepository struct {
	mock.Mock
}

type MockTodoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTodoRepository) EXPECT() *MockTodoRepository_Expecter {
	return &MockTodoRepository_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function for the type MockTodoRepository
func (_mock *MockTodoRepository) GetAll(ctx context.Context) ([]domain.Todo, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Todo, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Todo); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Todo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTodoRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockTodoRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTodoRepository_Expecter) GetAll(ctx interface{}) *MockTodoRepository_GetAll_Call {
	return &MockTodoRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockTodoRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockTodoRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTodoRepository_GetAll_Call) Return(todos []domain.Todo, err error) *MockTodoRepository_GetAll_Call {
	_c.Call.Return(todos, err)
	return _c
}

func (_c *MockTodoRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Todo, error)) *MockTodoRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTodoService creates a new instance of MockTodoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTodoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTodoService {
	mock := &MockTodoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTodoService is an autogenerated mock type for the TodoService type
type MockTodoService struct {
	mock.Mock
}

type MockTodoService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTodoService) EXPECT() *MockTodoService_Expecter {
	return &MockTodoService_Expecter{mock: &_m.Mock}
}

// GetAllTodo provides a mock function for the type MockTodoService
func (_mock *MockTodoService) GetAllTodo(ctx context.Context) ([]domain.Todo, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTodo")
	}

	var r0 []domain.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Todo, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Todo); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Todo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTodoService_GetAllTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTodo'
type MockTodoService_GetAllTodo_Call struct {
	*mock.Call
}

// GetAllTodo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTodoService_Expecter) GetAllTodo(ctx interface{}) *MockTodoService_GetAllTodo_Call {
	return &MockTodoService_GetAllTodo_Call{Call: _e.mock.On("GetAllTodo", ctx)}
}

func (_c *MockTodoService_GetAllTodo_Call) Run(run func(ctx context.Context)) *MockTodoService_GetAllTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTodoService_GetAllTodo_Call) Return(todos []domain.Todo, err error) *MockTodoService_GetAllTodo_Call {
	_c.Call.Return(todos, err)
	return _c
}

func (_c *MockTodoService_GetAllTodo_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Todo, error)) *MockTodoService_GetAllTodo_Call {
	_c.Call.Return(run)
	return _c
}
